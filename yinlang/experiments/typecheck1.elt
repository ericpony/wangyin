-- 10
-- "ok"
-- true

-- (if true 10 "ok")

-- (if true 10 (if false "ok" true))

-- (define f (fun ([x Int] [y Int] [-> Int]) (+ x y)))

-- (f 1)


-- (define g (fun ([x Int] [y Bool]) (if true x y)))
-- g

-- (define fact
--   (fun ([x Int] [-> Int])
--     (if (= x 0) 1 (* x (fact (- x 1))))))

-- (fact 5)


-- (define even
--   (fun ([x Int] [-> Bool])
--     (if (= x 0)
--         true
--         (if (= x 1)
--             false
--             (odd (- x 1))))))

-- (define odd
--   (fun ([x Int] [-> Bool])
--     (if (= x 0)
--         false
--         (if (= x 1)
--             true
--             (even (- x 1))))))


(define listof
  (fun (T)
    (U Nil
       (record Pair
         [head T]
         [tail (listof T)]))))


(record A
  [x Any]
  [y String])


(define o (A :x true :y "hi"))
o.x
-- (A :x 1 :y "hi")
-- (1 2)


-- (define f (fun ([a (A :x Any :y String)] [-> a.x]) a.x))
-- (f (A :x 1 :y "hi"))
